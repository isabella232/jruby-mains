#-*- mode: ruby -*-

gemfile

packaging 'war'

properties( 'jruby.main' => 'org.jruby.mains.JettyRunMain',
            'gem.home' => '${basedir}/../rubygems',
            'gem.path' => '${gem.home}',
            # default versions
            'jruby.version' => '1.7.19',
            'bundler.version' => '1.9.2',
            'jruby.plugins.version' => '1.0.9' )

gem 'bundler', '${bundler.version}'

pom 'org.jruby:jruby', '${jruby.version}'

scope :provided do
  jar 'org.jruby.mains:jruby-mains', '${artifact.version}'
  jar 'org.eclipse.jetty', 'jetty-server', '${jetty.version}'
  jar 'org.eclipse.jetty', 'jetty-webapp', '${jetty.version}'
end

build do
  directory 'pkg'
  final_name 'executable'
end

files = [ 'config.ru', '*file', '*file.lock', '.jbundler/classpath.rb',
          'lib/**', 'app/**', 'config/**', 'vendor/**', 'spec/**' ]
jruby_plugin!( :gem, :includeRubygemsInResources => true ) do
  execute_goals( 'generate-resources', 'process-resources', :includeBinStubs => true, :includeRubyResources => files )
end

plugin :dependency, '2.5.1' do
  items = []
  File.read( 'Jarfile.lock' ).each_line do |l|
    data = l.sub(/-\ /, '').strip.split(':')
    if data.size > 3
      data = Hash[ [:groupId, :artifactId, :type, :version, :classifier].zip( data ) ]
      data[ :outputDirectory ] = File.join( '${project.build.outputDirectory}/jars',
                                            data[:groupId].gsub(/[.]/, '/'),
                                            data[:artifactId],
                                            data[:version] )
      items << data
    end
  end
  execute_goal( :copy,
                :id => 'copy jar dependencies', :phase => 'prepare-package',
                :artifactItems => items )
  execute_goal( 'unpack-dependencies',
                :id => 'jetty-classpath',
                :phase => 'validate',
                :includeScope => :provided,
                :includeGroupIds => 'org.eclipse.jetty,org.eclipse.jetty.orbit',
                :excludes => ['*', 'about_files/*', 'META-INF/*'].join(','),
                :outputDirectory => '${project.build.directory}/${project.build.finalName}' )
  execute_goal( 'unpack-dependencies',
                :id => 'jruby-mains-classpath',
                :phase => 'validate',
                :includeScope => :provided,
                :includeGroupIds => 'org.jruby.mains',
                :outputDirectory => '${project.build.directory}/${project.build.finalName}' )
end

resource do
  targetPath '${project.build.directory}/${project.build.finalName}'
  directory '${gem.home}'
  includes ['bin/*']
end

plugin :war, '2.2', :archive => { :manifest => { :mainClass => '${jruby.main}' } }, :webXml => 'config/web.xml'

# test bits

phase :'integration-test' do
  plugin( 'org.codehaus.mojo:exec-maven-plugin:1.2',
          :executable => 'java',
          :workingDirectory => '${project.build.directory}',
          :environmentVariables => {
            'PATH' => 'path',
            'HOME' => 'blabla',
            'GEM_PATH' => '${basedir}',
            'GEM_HOME' => '${basedir}'
          } ) do
    
    execute_goal( :exec, :id => 'rake -T',
                  :arguments => [ '-jar', 'executable.war', '-S', 'rake', '-T' ] )
    
    # TODO
    #execute_goal( :exec, :id => 'rake spec',
    #              :arguments => [ '-jar', 'executable.war', '-S', 'rake', 'spec' ] )
    
    execute_goal( :exec, :id => 'rspec',
                  :arguments => [ '-jar', 'executable.war', '-S', 'rspec' ] )
    
  end
end

